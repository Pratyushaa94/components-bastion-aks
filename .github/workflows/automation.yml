name: AKS Bastion Setup & Deploy Infra + Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  bastion-aks-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Azure Login using AZURE_CREDENTIALS JSON secret
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Prepare SSH key for Bastion
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/bastion.pem
          chmod 600 ~/.ssh/bastion.pem
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts

      # 4. SSH into Bastion and run commands
      - name: Connect to Bastion and Setup Tools + Deploy
        run: |
          ssh -i ~/.ssh/bastion.pem -o StrictHostKeyChecking=yes ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} 'bash -s' <<'REMOTE'
          set -euo pipefail

          echo "=== [Step 1] Update Packages ==="
          sudo apt-get update -y
          sudo apt-get install -y curl jq unzip

          echo "=== [Step 2] Install Tools (Azure CLI, kubectl, Helm, Terraform) ==="
          if ! command -v az >/dev/null 2>&1; then curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash; fi
          if ! command -v kubectl >/dev/null 2>&1; then
            KVER=$(curl -s https://dl.k8s.io/release/stable.txt)
            curl -LO "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
            sudo install -m 0755 kubectl /usr/local/bin/kubectl
          fi
          if ! command -v helm >/dev/null 2>&1; then curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash; fi
          if ! command -v terraform >/dev/null 2>&1; then
            TV="1.9.8"
            curl -LO "https://releases.hashicorp.com/terraform/${TV}/terraform_${TV}_linux_amd64.zip"
            unzip terraform_${TV}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            rm terraform_${TV}_linux_amd64.zip
          fi

          echo "=== [Step 3] Verify Installed Versions ==="
          az version | jq '.["azure-cli"]'
          kubectl version --client --short
          helm version --short
          terraform version

          echo "=== [Step 4] Connect to AKS Cluster ==="
          az aks get-credentials -n dev-aks -g dev-rg-aks --overwrite-existing
          kubectl get nodes -o wide

          echo "=== [Step 5] Terraform Infra Deployment ==="
          if [ -d ~/infra ]; then
            cd ~/infra
            terraform init
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          else
            echo "⚠️ No ~/infra folder found, skipping Terraform"
          fi

          echo "=== [Step 6] ArgoCD Installation ==="
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          echo "✅ ArgoCD Installed"

          echo "=== [Step 7] Helm Deployment (Monitoring Stack) ==="
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring --create-namespace
          echo "✅ Monitoring Installed"

          REMOTE
